Index: src/main/kotlin/Character.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>open class Warrior(health: Int = 50) {\r\n    fun hit(opponent: Warrior) {\r\n        opponent.health -= attack\r\n    }\r\n\r\n    var health: Int = health\r\n        private set\r\n    open val attack: Int = 5\r\n    val isAlive: Boolean\r\n        get() = health > 0\r\n}\r\n\r\nclass Knight : Warrior(50) {\r\n    override val attack: Int = 8\r\n}\r\n\r\nclass Army {\r\n\r\n    private val troops = mutableListOf<Warrior>()\r\n    fun addUnits(quantity: Int, factory: () -> Warrior) {\r\n        repeat(quantity) {\r\n            val warrior1 = factory()\r\n            troops.add(warrior1)\r\n        }\r\n    }\r\n\r\n    fun nextWarrior(): Warrior {\r\n        return troops.first()\r\n    }\r\n\r\n    fun killedWarrior() {\r\n        troops.removeFirst()\r\n    }\r\n\r\n    val hasTroopsLeft: Boolean\r\n        get() = troops.size > 0\r\n\r\n}\r\n\r\nfun fight(warrior1: Warrior, warrior2: Warrior): Boolean {\r\n    var attacker = warrior1\r\n    var defender = warrior2\r\n    while (attacker.isAlive) {\r\n        attacker.hit(defender)\r\n        attacker = defender.also { defender = attacker }\r\n    }\r\n    return warrior1.isAlive\r\n}\r\n\r\nfun fight(army1: Army, army2: Army): Boolean {\r\n    while (army1.hasTroopsLeft && army2.hasTroopsLeft) {\r\n        val warrior1 = army1.nextWarrior()\r\n        val warrior2 = army2.nextWarrior()\r\n        if (fight(warrior1, warrior2)) {\r\n            army2.killedWarrior()\r\n        } else {\r\n            army1.killedWarrior()\r\n        }\r\n    }\r\n    return army1.hasTroopsLeft\r\n}\r\n\r\n/*\r\n\r\nfun main() {\r\n    // smoke test\r\n    val chuck = Warrior()\r\n\r\n    val bruce = Warrior()\r\n\r\n    check(fight(chuck,bruce) == true) {\"Warrior should win Warrior\"}\r\n    check(chuck.isAlive == true) {\"Warrior winner should be alive \"}\r\n    check(bruce.isAlive == false) {\"Warrior winner should not be alive \"}\r\n    val carl = Knight()\r\n    val dave = Warrior()\r\n    check(fight(dave,carl) == false) {\"Warrior should lose to Knight\"}\r\n    check(carl.isAlive == true) {\"Knight winner should be alive \"}\r\n    check(dave.isAlive == false) {\"Warrior defeated should not be alive \"}\r\n    println(\"OK\")\r\n}\r\n\r\n */\r\nfun main() {\r\n    //smoke test\r\n\r\n    val myArmy = Army()\r\n    myArmy.addUnits(3, ::Knight)\r\n\r\n\r\n    val enemyArmy = Army()\r\n    enemyArmy.addUnits(3, ::Warrior)\r\n\r\n    val army3 = Army()\r\n    army3.addUnits(20, ::Warrior)\r\n    army3.addUnits(5, ::Knight)\r\n\r\n    val army4 = Army()\r\n    army4.addUnits(30, ::Knight)\r\n\r\n    check(fight(myArmy, enemyArmy))\r\n    check(!fight(army3, army4))\r\n    println(\"OK\")\r\n\r\n}
===================================================================
diff --git a/src/main/kotlin/Character.kt b/src/main/kotlin/Character.kt
--- a/src/main/kotlin/Character.kt	
+++ b/src/main/kotlin/Character.kt	
@@ -19,8 +19,7 @@
     private val troops = mutableListOf<Warrior>()
     fun addUnits(quantity: Int, factory: () -> Warrior) {
         repeat(quantity) {
-            val warrior1 = factory()
-            troops.add(warrior1)
+            troops.add(factory())
         }
     }
 
